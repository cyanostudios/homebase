import React, { useMemo, useState, useEffect } from 'react';
import { Heading, Text } from '@/core/ui/Typography';
import { Card } from '@/core/ui/Card';
import { Button } from '@/core/ui/Button';
import { Eye, ChevronUp, ChevronDown, Search } from 'lucide-react';
import { useChannels } from '../hooks/useChannels';

type SortField = 'channel' | 'mapped' | 'enabled' | 'updated';
type SortOrder = 'asc' | 'desc';

export const ChannelsList: React.FC = () => {
  const { channels, openChannelForView, loadChannels } = useChannels();

  const [searchTerm, setSearchTerm] = useState('');
  const [sortField, setSortField] = useState<SortField>('channel');
  const [sortOrder, setSortOrder] = useState<SortOrder>('asc');
  const [isMobileView, setIsMobileView] = useState(false);

  useEffect(() => {
    const check = () => setIsMobileView(window.innerWidth < 768);
    check();
    window.addEventListener('resize', check);
    return () => window.removeEventListener('resize', check);
  }, []);

  const handleSort = (field: SortField) => {
    if (sortField === field) setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');
    else { setSortField(field); setSortOrder('asc'); }
  };

  const filtered = useMemo(() => {
    const needle = searchTerm.trim().toLowerCase();
    return channels.filter(ch =>
      !needle || ch.channel.toLowerCase().includes(needle)
    );
  }, [channels, searchTerm]);

  const sorted = useMemo(() => {
    const items = [...filtered];
    const cmp = (a: any, b: any) => {
      let av: any; let bv: any;
      switch (sortField) {
        case 'mapped':  av = a.mappedCount;  bv = b.mappedCount;  break;
        case 'enabled': av = a.enabledCount; bv = b.enabledCount; break;
        case 'updated':
          av = a.lastSyncedAt ? new Date(a.lastSyncedAt).getTime() : 0;
          bv = b.lastSyncedAt ? new Date(b.lastSyncedAt).getTime() : 0; break;
        case 'channel':
        default:        av = a.channel.toLowerCase(); bv = b.channel.toLowerCase(); break;
      }
      if (typeof av === 'number' && typeof bv === 'number') return sortOrder === 'asc' ? av - bv : bv - av;
      const res = String(av).localeCompare(String(bv), undefined, { numeric: true, sensitivity: 'base' });
      return sortOrder === 'asc' ? res : -res;
    };
    return items.sort(cmp);
  }, [filtered, sortField, sortOrder]);

  const SortIcon = ({ field }: { field: SortField }) => {
    if (sortField !== field) return null;
    return sortOrder === 'asc' ? <ChevronUp className="w-4 h-4" /> : <ChevronDown className="w-4 h-4" />;
  };

  return (
    <div className="p-4 sm:p-8">
      <div className="mb-6 sm:mb-8 flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4">
        <div>
          <Heading level={1}>Channels</Heading>
          <Text variant="caption">Hub for sales channels</Text>
        </div>
        <div className="flex flex-col sm:flex-row gap-3 sm:items-center">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 h-4 w-4" />
            <input
              type="text"
              placeholder="Search channels…"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full sm:w-80 pl-10 pr-4 py-2 text-sm border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          <div className="flex gap-2">
            <Button onClick={() => loadChannels()} variant="secondary">Refresh</Button>
          </div>
        </div>
      </div>

      <Card>
        {!isMobileView ? (
          <table className="w-full">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100 select-none"
                    onClick={() => handleSort('channel')}>
                  <div className="flex items-center gap-1">
                    Channel
                    <SortIcon field="channel" />
                  </div>
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Configured</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100 select-none"
                    onClick={() => handleSort('mapped')}>
                  <div className="flex items-center gap-1">
                    Mapped
                    <SortIcon field="mapped" />
                  </div>
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100 select-none"
                    onClick={() => handleSort('enabled')}>
                  <div className="flex items-center gap-1">
                    Enabled
                    <SortIcon field="enabled" />
                  </div>
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Sync Status</th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100 select-none"
                    onClick={() => handleSort('updated')}>
                  <div className="flex items-center gap-1">
                    Last Sync
                    <SortIcon field="updated" />
                  </div>
                </th>
                <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {sorted.length === 0 ? (
                <tr>
                  <td colSpan={7} className="px-6 py-12 text-center text-gray-400">
                    No channels yet. Save Woo settings or map products to channels to get started.
                  </td>
                </tr>
              ) : (
                sorted.map((ch: any, idx: number) => (
                  <tr key={ch.channel}
                      className={`${idx % 2 === 0 ? 'bg-white' : 'bg-gray-50'} hover:bg-blue-50 focus:bg-blue-100 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-inset cursor-pointer`}
                      tabIndex={0}
                      data-list-item={JSON.stringify(ch)}
                      data-plugin-name="channels"
                      role="button"
                      aria-label={`Open channel ${ch.channel}`}
                      onClick={() => openChannelForView(ch)}>
                    <td className="px-6 py-4 whitespace-nowrap font-medium">{ch.channel}</td>
                    <td className="px-6 py-4 whitespace-nowrap">{ch.configured ? 'Yes' : 'No'}</td>
                    <td className="px-6 py-4 whitespace-nowrap">{ch.mappedCount}</td>
                    <td className="px-6 py-4 whitespace-nowrap">{ch.enabledCount}</td>
                    <td className="px-6 py-4 whitespace-nowrap text-sm">
                      ✅ {ch.status?.success ?? 0} • ⏳ {ch.status?.queued ?? 0} • ⚠️ {ch.status?.error ?? 0} • ⭕ {ch.status?.idle ?? 0}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap">
                      {ch.lastSyncedAt ? new Date(ch.lastSyncedAt).toLocaleString() : '—'}
                    </td>
                    <td className="px-6 py-4 whitespace-nowrap text-right">
                      <Button variant="ghost" size="sm" icon={Eye}>View</Button>
                    </td>
                  </tr>
                ))
              )}
            </tbody>
          </table>
        ) : (
          <div className="divide-y divide-gray-200">
            {sorted.length === 0 ? (
              <div className="p-6 text-center text-gray-400">
                No channels yet. Save Woo settings or map products to channels to get started.
              </div>
            ) : (
              sorted.map((ch: any) => (
                <div key={ch.channel} className="p-4"
                     data-list-item={JSON.stringify(ch)}
                     data-plugin-name="channels"
                     role="button"
                     onClick={() => openChannelForView(ch)}>
                  <div className="flex items-start gap-3">
                    <div className="flex-1 min-w-0">
                      <h3 className="text-sm font-medium text-gray-900">{ch.channel}</h3>
                      <div className="mt-1 text-xs text-gray-600">
                        {ch.configured ? 'Configured' : 'Not configured'} • Mapped {ch.mappedCount} • Enabled {ch.enabledCount}
                      </div>
                    </div>
                    <div>
                      <Button variant="ghost" size="sm" icon={Eye} className="h-8 px-3">View</Button>
                    </div>
                  </div>
                </div>
              ))
            )}
          </div>
        )}
      </Card>
    </div>
  );
};
